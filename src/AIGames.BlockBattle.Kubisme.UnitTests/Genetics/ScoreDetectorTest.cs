using AIGames.BlockBattle.Kubisme.Genetics;
using NUnit.Framework;

namespace AIGames.BlockBattle.Kubisme.UnitTests.Genetics
{
	[TestFixture]
	public class ScoreDetectorTest
	{
		[Test]
		public void GetScore_PerfectClearWithLBlock_PerfectClear()
		{
			var before = Field.Create(0, 0, 0, @"
				..........
				..........
				..........
				..........
				..........
				..........
				XXXXX...XX
				XXXXX.XXXX");
			var after = Field.Create(18, 1, 0, @"
				..........
				..........
				..........
				..........
				..........
				..........
				..........
				..........");
			AssertGetScore(BlockBattleScore.PerfectClear, Block.L, before, after);
		}

		[Test]
		public void GetScore_SingleTSpinTBlock_SingleTSpin()
		{
			var before = Field.Create(6, 0, 0, @"
				..........
				..X.XXX...
				X.XXXX...X
				XXXXXXX.XX
				XXXXXXX.XX
				XX.XXXXXXX
				X.XXXXXX.X");
			var after = Field.Create(11, 1, 0, @"
				..........
				..........
				..X.XXX...
				X.XXXXXXXX
				XXXXXXX.XX
				XX.XXXXXXX
				X.XXXXXX.X");
			AssertGetScore(BlockBattleScore.SingleTSpin, Block.T, before, after);
		}
		[Test]
		public void GetScore_DoubleTSpinTBlock_DoubleTSpin()
		{
			var before = Field.Create(3, 1, 0, @"
				..........
				..........
				X......XX.
				X.....XXXX
				X....XXXXX
				X...XXXXXX
				XX...XXXXX
				XXX.XXXXXX");
			var after = Field.Create(14, 2, 0, @"
				..........
				..........
				..........
				..........
				X......XX.
				X.....XXXX
				X....XXXXX
				X...XXXXXX");
			AssertGetScore(BlockBattleScore.DoubleTSpin, Block.T, before, after);
		}

		[Test]
		public void GetScore_DoubleLineClearLBlock_DoubleLineClear()
		{
			var before = Field.Create(0, 0, 0, @"
				..........
				..........
				..........
				..........
				X.........
				XXX.......
				XXXXXXXXX.
				XXXXXXXXX.");
			var after = Field.Create(3, 1, 0, @"
				..........
				..........
				..........
				..........
				..........
				..........
				X.........
				XXX.....XX");
			AssertGetScore(BlockBattleScore.DoubleLineClear, Block.L, before, after);
		}
		[Test]
		public void GetScore_TripleLineClearJBlock_TripleLineClear()
		{
			var before = Field.Create(3, 1, 0, @"
				..........
				XX........
				X....X..X.
				XXXXXX..XX
				XXXXXX..XX
				XXXXXX.XXX
				XXXXXX.XXX");
			var after = Field.Create(10, 2, 0, @"
				..........
				..........
				..........
				..........
				XX........
				X....X..X.
				XXXXXX..XX");
			AssertGetScore(BlockBattleScore.TripleLineClear, Block.J, before, after);
		}
		[Test]
		public void GetScore_QuadrupleLineClearIBlock_QuadrupleLineClear()
		{
			var before = Field.Create(0, 0, 0, @"
				..........
				..........
				...X......
				XX.X......
				XXXX.XXXXX
				XXXX.XXXXX
				XXXX.XXXXX
				XXXX.XXXXX");
			var after = Field.Create(10, 1, 0, @"
				..........
				..........
				..........
				..........
				..........
				..........
				...X......
				XX.X......");
			AssertGetScore(BlockBattleScore.QuadrupleLineClear, Block.I, before, after);
		}

		[Test]
		public void GetScore_SingleLineClearSBlockWithCombo_SingleLineClear()
		{
			var before = Field.Create(3, 1, 0, @"
				..........
				..........
				..........
				..........
				.......X..
				.......XXX
				......XXXX
				XXXXX.XXXX");
			var after = Field.Create(3, 1, 0, @"
				..........
				..........
				..........
				..........
				..........
				.......X..
				....X..XXX
				....XXXXXX");
			AssertGetScore(BlockBattleScore.SingleLineClear, Block.S, before, after);
		}
		[Test]
		public void GetScore_SingleLineClearOBlock_SingleLineClear()
		{
			var before = Field.Create(3, 0, 0, @"
				..........
				..........
				..........
				..........
				..XXXXX...
				.XXXXXX..X
				XXXXXXX..X
				XXXXXXXXX.");
			var after = Field.Create(3, 0, 0, @"
				..........
				..........
				..........
				..........
				..........
				..XXXXX...
				.XXXXXXXXX
				XXXXXXXXX.");
			AssertGetScore(BlockBattleScore.SingleLineClear, Block.O, before, after);
		}

		private static void AssertGetScore(BlockBattleScore expected, Block block, Field before, Field after)
		{
			var actual = ScoreDetector.GetScore(before, after, block);
			Assert.AreEqual(expected, actual);
		}
	}
}
